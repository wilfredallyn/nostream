#!/bin/bash
# PROJECT_ROOT="$(dirname $(readlink -f "${BASH_SOURCE[0]}"))/.."
# Resolving the full path of the directory containing the script
# This is a workaround for the lack of `readlink -f` on macOS.
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
PROJECT_ROOT="${DIR}/.."

DOCKER_COMPOSE_FILE="${PROJECT_ROOT}/docker-compose.yml"
DOCKER_COMPOSE_TOR_FILE="${PROJECT_ROOT}/docker-compose.tor.yml"
TOR_DATA_DIR="$PROJECT_ROOT/.nostr/tor/data"
NOSTR_CONFIG_DIR="${PROJECT_ROOT}/.nostr"
SETTINGS_FILE="${NOSTR_CONFIG_DIR}/settings.yaml"
DEFAULT_SETTINGS_FILE="${PROJECT_ROOT}/resources/default-settings.yaml"
CURRENT_DIR=$(pwd)

if [[ ${CURRENT_DIR} =~ /scripts$ ]]; then
        echo "Please run this script from the Nostream root folder, not the scripts directory."
        echo "To do this, change up one directory, and then run the following command:"
        echo "./scripts/start"
        exit 1
fi

if [ "$EUID" -eq 0 ]
  then echo "Error: Nostream should not be run as root."
  exit 1
fi

if [[ ! -d "${NOSTR_CONFIG_DIR}" ]]; then
  echo "Creating folder ${NOSTR_CONFIG_DIR}"
  mkdir -p "${NOSTR_CONFIG_DIR}"
fi

if [[ ! -f "${SETTINGS_FILE}" ]]; then
  echo "Copying ${DEFAULT_SETTINGS_FILE} to ${SETTINGS_FILE}"
  cp "${DEFAULT_SETTINGS_FILE}" "${SETTINGS_FILE}"
fi

mkdir -p $TOR_DATA_DIR

docker compose \
  -f $DOCKER_COMPOSE_FILE \
  -f $DOCKER_COMPOSE_TOR_FILE \
  up --build --remove-orphans $@
